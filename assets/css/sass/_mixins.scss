$navy: #001f3f;

$blue: #0074d9;

$aqua: #7fdbff;

$teal: #39cccc;

$olive: #3d9970;

$green: #2ecc40;

$lime: #01ff70;

$yellow: #ffdc00;

$orange: #ff851b;

$red: #ff4136;

$fuchsia: #f012be;

$purple: #b10dc9;

$maroon: #85144b;

$silver: #dddddd;

$gray: #aaaaaa;

$black: #222222;

@mixin CB-animation {
  -webkit-transition: all 1s cubic-bezier(0.7, 0, 0.58, 1) 0s;
  -moz-transition: all 1s cubic-bezier(0.7, 0, 0.58, 1) 0s;
  -o-transition: all 1s cubic-bezier(0.7, 0, 0.58, 1) 0s;
  -ms-transition: all 1s cubic-bezier(0.7, 0, 0.58, 1) 0s;
  transition: all 1s cubic-bezier(0.7, 0, 0.58, 1) 0s;
}

@mixin ease-animation {
  -webkit-transition: 0.5s ease;
  -moz-transition: 0.5s ease;
  -o-transition: 0.5s ease;
  -ms-transition: 0.5s ease;
  transition: 0.5s ease;
}

@mixin borderImage($src) {
  -webkit-border-image:url($src) 30 30 round;
  -moz-border-image:url($src) 30 30 round;
  -ms-border-image:url($src) 30 30 round;
  -o-border-image:url($src) 30 30 round;
  border-image:url($src) 30 30 round;
}

// ====================================================================
// mixins: http://www.brokendigits.com/2012/05/14/css3-mixins-for-sass/
// ====================================================================

// generically prefix any property name
@mixin prefix($name, $value) {
  -webkit-#{$name}: $value;
  -moz-#{$name}: $value;
  // -ms-#{$name}: $value;
  // -o-#{$name}: $value;
  #{$name}: $value;
}

// for border-radius, named to be consistent with roundedcorner
@mixin rounded($radius: 6px) {
  border-radius: $radius;
}

// used for rounding a single corner. eg. roundedcorner(top, left)
@mixin roundedcorner($surface, $side, $radius: 6px) {
  border-#{$surface}-#{$side}-radius: $radius;
}

@mixin boxshadow($horiz, $vert, $blur, $color) {
  box-shadow: $horiz $vert $blur $color;
}

@mixin innershadow($horiz, $vert, $blur, $color) {
  box-shadow: inset $horiz $vert $blur $color;
}

@mixin opacity($level) {
  filter: alpha(opacity = $level * 100);
  opacity: $level;
}

@mixin borderimage($image, $top, $right, $bottom, $left, $repeat: stretch) {
  border-width: #{$top}px #{$right}px #{$bottom}px #{$left}px;
  -webkit-border-image: url($image) $top $right $bottom $left $repeat;
  -moz-border-image: url($image) $top $right $bottom $left $repeat;
  -ms-border-image: url($image) $top $right $bottom $left $repeat;
  -o-border-image: url($image) $top $right $bottom $left $repeat;
  border-image: url($image) $top $right $bottom $left $repeat;
}

// useful for semi-transparent borders which can have bleed-through. See https://developer.mozilla.org/en/CSS/background-clip
@mixin backgroundclip($val: padding-box) {
  -webkit-background-clip: $val;
  -moz-background-clip: $val;
}

@mixin transition($property: all, $duration: 0.2s, $timing: linear) {
  -webkit-transition: #{$property} $duration $timing;
  -moz-transition: #{$property} $duration $timing;
  -ie-transition: #{$property} $duration $timing;
  -o-transition: #{$property} $duration $timing;
  transition: $property $duration $timing;
}

// if you need to transition a prefixed property, use this instead
@mixin transition-with-prefix($property, $duration: 0.2s, $timing: linear) {
  -webkit-transition: -webkit-#{$property} $duration $timing;
  -moz-transition: -moz-#{$property} $duration $timing;
  -ie-transition: -moz-#{$property} $duration $timing;
  -o-transition: -o-#{$property} $duration $timing;
  transition: $property $duration $timing;
}

@mixin transform($type) {
  -webkit-transform: $type;
  -moz-transform: $type;
  -ms-transform: $type;
  -o-transform: $type;
  transform: $type;
}

@mixin animation($name, $timing: 0.5s) {
  -webkit-animation: $name $timing;
  -moz-animation: $name $timing;
  -ms-animation: $name $timing;
  -o-animation: $name $timing;
}
