{"version":3,"sources":["src/babel.js"],"names":[],"mappings":";;;AACA,SAAS,UAAT,CAAqB,OAArB,EAA8B,YAA9B,EAA6C;;AAEzC,mBAAgB,gBAAgB,GAAhC;;AAEA,QAAI,aAAa,IAAI,MAAJ,CAET,QAAQ,YAAR,GAAuB,iBAAvB,GAEA,iCAFA,GAIA,SAJA,GAIY,YAJZ,GAI2B,YANlB,EAQb,IARa,CAAjB;;AAYA,QAAI,UAAU,CAAC,EAAD,CAAd;;AAEA,QAAI,aAAa,IAAjB;;AAGA,WAAO,aAAa,WAAW,IAAX,CAAiB,OAAjB,CAApB,EAA+C;;AAE3C,YAAI,sBAAsB,WAAY,CAAZ,CAA1B;;AAEA,YACI,oBAAoB,MAApB,IACA,wBAAwB,YAF5B,EAGK;;AAED,oBAAQ,IAAR,CAAc,EAAd;AAEH;;AAED,YAAI,eAAJ;;AAEA,YAAI,WAAY,CAAZ,CAAJ,EAAoB;;AAEhB,8BAAkB,WAAY,CAAZ,EAAgB,OAAhB,CACd,IAAI,MAAJ,CAAY,MAAZ,EAAoB,GAApB,CADc,EAEd,IAFc,CAAlB;AAKH,SAPD,MAOO;;AAEH,8BAAkB,WAAY,CAAZ,CAAlB;AAEH;;AAGD,gBAAS,QAAQ,MAAR,GAAiB,CAA1B,EAA8B,IAA9B,CAAoC,eAApC;AACH;;AAED,WAAQ,OAAR;AAEH;;AAED,SAAS,OAAT,CAAkB,IAAlB,EAAwB,QAAxB,EAAmC;;AAE/B,QAAI,UAAU,IAAI,cAAJ,EAAd;AACA,YAAQ,IAAR,CAAa,KAAb,EAAoB,IAApB,EAA0B,IAA1B;;AAEA,YAAQ,MAAR,GAAiB,YAAW;AACxB,YAAI,KAAK,MAAL,IAAe,GAAf,IAAsB,KAAK,MAAL,GAAc,GAAxC,EAA6C;AACzC,qBAAU,KAAK,QAAf;AACH,SAFD,MAEO;AACH,oBAAQ,GAAR,CAAY,OAAZ;AACH;AACJ,KAND;;AAQA,YAAQ,OAAR,GAAkB,YAAW;AACzB,gBAAQ,GAAR,CAAY,OAAZ;AACH,KAFD;;AAIA,YAAQ,IAAR;AAEH;;AAED,SAAS,UAAT,CAAqB,IAArB,EAA4B;;AAExB,aAAS,cAAT,CAAwB,WAAxB,EAAqC,SAArC,GAAiD,IAAjD;AAEH;;AAED,IAAI,SAAS,YAAW;;;AAGpB,QAAM,MAAM,oBAAZ;;AAEA,aAAS,IAAT,GAAgB;;AAEZ;AAEH;;AAED,aAAS,MAAT,GAAkB;;;AAGd,iBAAS,gBAAT,CAA0B,OAA1B,EAAmC,UAAS,KAAT,EAAgB;;AAE/C,gBAAI,KAAK,MAAM,MAAf;;AAEA,gBAAK,GAAG,OAAH,KAAe,GAApB,EAA0B;AAAE,uBAAO,KAAP;AAAe;;AAE3C,oBAAQ,GAAR,EAAa,UAAS,IAAT,EAAe;;AAExB,oBAAI,MAAM,WAAW,IAAX,CAAV;;AAEA,oBAAK,GAAG,EAAH,IAAS,YAAd,EAA6B;AACzB,+BAAY,iDAAiD,WAAW,GAAX,EAAgB,MAA7E;AACH;;AAED,oBAAK,GAAG,EAAH,IAAS,YAAd,EAA6B;AACzB,+BAAY,iFAAiF,UAAU,GAAV,CAA7F;AACH;;AAED,oBAAK,GAAG,EAAH,IAAS,cAAd,EAA+B;AAC3B,+BAAY,oEAAoE,gBAAgB,GAAhB,CAAhF;AACH;;AAED,oBAAK,GAAG,EAAH,IAAS,aAAd,EAA8B;AAC1B,+BAAY,4CAA4C,YAAa,GAAb,CAAxD;AACH;AAEJ,aApBD;AAsBH,SA5BD,EA4BG,KA5BH;AA8BH;;AAED,aAAS,UAAT,CAAqB,GAArB,EAA2B;;AAEvB,YAAI,UAAU,EAAd;;AAEA,YAAI,GAAJ,CAAQ,UAAS,CAAT,EAAY;AAChB,cAAE,GAAF,CAAM,UAAS,CAAT,EAAY;AACd,oBAAK,CAAC,MAAM,CAAN,CAAN,EAAiB;AACb,4BAAQ,IAAR,CAAc,SAAS,CAAT,CAAd;AACH;AACJ,aAJD;AAKH,SAND;;AAQA,eAAO,OAAP;AAEH;;AAED,aAAS,SAAT,CAAoB,GAApB,EAA0B;;AAEtB,YAAI,OAAO,WAAY,GAAZ,CAAX;;AAEA,YAAI,QAAQ,CAAZ;YAAe,SAAS,KAAK,MAA7B;;AAEA,aAAK,OAAL,CAAa,UAAS,GAAT,EAAc,GAAd,EAAmB;AAC5B,qBAAS,GAAT;AACH,SAFD;;AAIA,eAAO,KAAK,KAAL,CAAY,QAAQ,MAAR,GAAiB,IAA7B,IAAsC,IAA7C;AAEH;;AAED,aAAS,eAAT,CAA0B,GAA1B,EAAgC;;AAE5B,YAAI,UAAU,EAAd;YAAkB,SAAS,CAA3B;YAA8B,UAAU,CAAxC;;AAEA,YAAI,GAAJ,CAAQ,UAAS,CAAT,EAAY,CAAZ,EAAe;AACnB,gBAAK,EAAE,MAAF,GAAW,OAAhB,EAA0B;AACtB,0BAAU,EAAE,MAAZ;AACA,yBAAS,CAAT;AACH;AACJ,SALD;;AAOA,YAAI,MAAJ,EAAY,GAAZ,CAAgB,UAAS,CAAT,EAAY;AACxB,gBAAK,CAAC,MAAM,CAAN,CAAN,EAAiB;AACb,wBAAQ,IAAR,CAAc,CAAd;AACH;AACJ,SAJD;;AAMA,eAAO,QAAQ,MAAf;AAEH;;;AAGD,aAAS,WAAT,CAAsB,GAAtB,EAA4B;;AAExB,YAAI,OAAO,WAAY,GAAZ,CAAX;;AAEN,YAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB,OAAO,IAAP;;AAEvB,YAAI,UAAU,EAAd;YACC,WAAW,CADZ;YAEC,QAAQ,CAAC,KAAK,CAAL,CAAD,CAFT;;AAIA,aAAK,OAAL,CAAa,UAAS,GAAT,EAAc;;AAE1B,gBAAK,QAAQ,GAAR,MAAiB,SAAtB,EAAkC;AACrB,wBAAQ,GAAR,IAAe,CAAf;AACH,aAFV,MAEgB;AACH,wBAAQ,GAAR;AACH;;AAEV,gBAAK,QAAQ,GAAR,IAAe,QAApB,EAA+B;AAC9B,wBAAQ,CAAC,GAAD,CAAR;AACA,2BAAW,QAAQ,GAAR,CAAX;AACA,aAHD,MAGO,IAAI,QAAQ,GAAR,KAAgB,QAApB,EAA8B;AACpC,sBAAM,IAAN,CAAW,GAAX;AACA,2BAAW,QAAQ,GAAR,CAAX;AACA;AAED,SAhBD;;AAkBA,eAAO,KAAP;AAEG;;AAED;AAEH,CApIY,EAAb","file":"global.js","sourcesContent":["// http://stackoverflow.com/a/1293163/2102042\nfunction CSVToArray( strData, strDelimiter ) {\n\n    strDelimiter = (strDelimiter || \",\");\n\n    var objPattern = new RegExp(\n        (\n            \"(\\\\\" + strDelimiter + \"|\\\\r?\\\\n|\\\\r|^)\" +\n\n            \"(?:\\\"([^\\\"]*(?:\\\"\\\"[^\\\"]*)*)\\\"|\" +\n\n            \"([^\\\"\\\\\" + strDelimiter + \"\\\\r\\\\n]*))\"\n        ),\n        \"gi\"\n        );\n\n\n    var arrData = [[]];\n\n    var arrMatches = null;\n\n\n    while (arrMatches = objPattern.exec( strData )){\n\n        var strMatchedDelimiter = arrMatches[ 1 ];\n\n        if (\n            strMatchedDelimiter.length &&\n            strMatchedDelimiter !== strDelimiter\n            ){\n\n            arrData.push( [] );\n\n        }\n\n        var strMatchedValue;\n\n        if (arrMatches[ 2 ]){\n\n            strMatchedValue = arrMatches[ 2 ].replace(\n                new RegExp( \"\\\"\\\"\", \"g\" ),\n                \"\\\"\"\n                );\n\n        } else {\n\n            strMatchedValue = arrMatches[ 3 ];\n\n        }\n\n\n        arrData[ arrData.length - 1 ].push( strMatchedValue );\n    }\n\n    return( arrData );\n\n}\n\nfunction getFile( file, callback ) {\n\n    var request = new XMLHttpRequest();\n    request.open('GET', file, true);\n\n    request.onload = function() {\n        if (this.status >= 200 && this.status < 400) {\n            callback( this.response );\n        } else {\n            console.log('error');\n        }\n    };\n\n    request.onerror = function() {\n        console.log('error');\n    };\n\n    request.send();\n\n}\n\nfunction renderHTML( html ) {\n\n    document.getElementById('container').innerHTML = html;\n\n}\n\nvar Global = function() {\n\n    // csv generated with these tools: https://www.random.org/integer-sets/ & http://listofrandomnames.com/\n    const CSV = './names-scores.csv';\n\n    function init() {\n\n        events();\n\n    }\n\n    function events() {\n\n        // event listener for all links\n        document.addEventListener('click', function(event) {\n\n            let el = event.target;\n\n            if ( el.tagName !== 'A' ) { return false; }\n\n            getFile(CSV, function(data) {\n\n                let arr = CSVToArray(data);\n\n                if ( el.id == 'total-ints' ) {\n                    renderHTML( 'The total number of integers in the CSV is: ' + getAllInts(arr).length );\n                }\n\n                if ( el.id == 'mean-value' ) {\n                    renderHTML( 'The mean value of all the integers in the CSV (to three decimal places) is: ' + meanValue(arr) );\n                }\n\n                if ( el.id == 'highest-ints' ) {\n                    renderHTML( 'The highest number of integers in a single line of the CSV is: ' + mostIntsInArray(arr) );\n                }\n\n                if ( el.id == 'most-common' ) {\n                    renderHTML( 'The most common integer in the CSV is: ' + modeAverage( arr ) );\n                }\n\n            });\n\n        }, false);\n\n    }\n\n    function getAllInts( arr ) {\n\n        let allInts = [];\n\n        arr.map(function(x) {\n            x.map(function(y) {\n                if ( !isNaN(y) ) {\n                    allInts.push( parseInt(y) );\n                }\n            });\n        });\n\n        return allInts;\n\n    }\n\n    function meanValue( arr ) {\n\n        let ints = getAllInts( arr );\n\n        let total = 0, length = ints.length;\n\n        ints.forEach(function(val, key) {\n            total += val;\n        });\n\n        return Math.round( total / length * 1000 ) / 1000;\n\n    }\n\n    function mostIntsInArray( arr ) {\n\n        let largest = [], arrPos = 0, highest = 0;\n\n        arr.map(function(x, i) {\n            if ( x.length > highest ) {\n                highest = x.length;\n                arrPos = i;\n            }\n        });\n\n        arr[arrPos].map(function(x) {\n            if ( !isNaN(x) ) {\n                largest.push( x );\n            }\n        });\n\n        return largest.length;\n\n    }\n\n    // https://gist.github.com/Daniel-Hug/7273430\n    function modeAverage( arr ) {\n\n        var ints = getAllInts( arr );\n\n\t\tif (ints.length === 0) return null;\n\n\t\tvar modeMap = {},\n\t\t\tmaxCount = 1,\n\t\t\tmodes = [ints[0]];\n\n\t\tints.forEach(function(val) {\n\n\t\t\tif ( modeMap[val] === undefined ) {\n                modeMap[val] = 1;\n            } else {\n                modeMap[val]++;\n            }\n\n\t\t\tif ( modeMap[val] > maxCount ) {\n\t\t\t\tmodes = [val];\n\t\t\t\tmaxCount = modeMap[val];\n\t\t\t} else if (modeMap[val] == maxCount) {\n\t\t\t\tmodes.push(val);\n\t\t\t\tmaxCount = modeMap[val];\n\t\t\t}\n\n\t\t});\n\n\t\treturn modes;\n\n    }\n\n    init();\n\n}();\n"]}